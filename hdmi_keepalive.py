#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
HDMI Keep Alive for Linux
-------------------------
Simule une activit√© sur la sortie HDMI/DP pour √©viter que la TV change de source.
Compatible avec plusieurs √©crans, totalement invisible.
"""

###
# penser a installer tk 
# sur arch: "sudo pacman -Sy tk"
# sur debian: "apt install python3-tk tk tk-dev libtcl8.6 libtk8.6 -y"
# creation du venv + "pip install screeninfo"
###

import os
import tkinter as tk
import time
import threading
import signal
import sys
import screeninfo

def check_environment():
    """V√©rifier si nous sommes dans un virtualenv"""

    """if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print(f"‚úì Virtualenv activ√©: {sys.prefix}")
    else:
        print("‚ö† Aucun virtualenv d√©tect√©")
    
    print(f"Python ex√©cutable: {sys.executable}")
    """
    venv_path = os.environ.get('VIRTUAL_ENV')
    if venv_path:
        print(f"‚úì Virtualenv activ√©: {venv_path}")
    else:
        print("‚ö† Aucun virtualenv d√©tect√©")
    
    print(f"üí° Python utilis√©: {sys.executable}")


def find_hdmi_monitor():
    """Tente de d√©tecter un √©cran HDMI √† partir des infos EDID."""

    monitors = screeninfo.get_monitors()
    for m in monitors:
        # On cherche 'HDMI' dans le nom du moniteur ou son ID
        #if "HDMI" in m.name.upper() or "HDMI" in getattr(m, "device", "").upper():
        if ("HDMI" in m.name.upper() or "DP" in m.name.upper()) and not m.name.upper().startswith("EDP"):
            return m
    # Sinon, on retourne le deuxi√®me √©cran s‚Äôil existe
    if len(monitors) > 1:
        return monitors[1]
    # Par d√©faut, on renvoie le principal
    return monitors[0]


def keep_hdmi_alive(canvas, DEBUG):
    """Change la couleur d‚Äôun pixel invisible pour simuler un rafra√Æchissement vid√©o."""

    TOGGLE = False
    while True:
        color = "#000001" if TOGGLE else "#000000"
        canvas.create_rectangle(0, 0, 1, 1, fill=color, outline=color)
        canvas.update()
        TOGGLE = not TOGGLE
        time.sleep(30)
        if DEBUG:
            print("‚úÖ Pixel maj")


def start_hdmi_simulator(DEBUG):
    """Cr√©e une fen√™tre invisible sur l‚Äô√©cran HDMI d√©tect√©."""

    monitor = find_hdmi_monitor()
    print(f"‚úÖ √âcran HDMI d√©tect√© : {monitor.name} ({monitor.width}x{monitor.height} @ {monitor.x},{monitor.y})")

    root = tk.Tk()
    root.title("HDMI Keep Alive")

    # Fen√™tre totalement invisible
    root.overrideredirect(True)
    root.attributes("-alpha", 0.0)
    # Positionne sur l‚Äô√©cran HDMI d√©tect√©
    root.geometry(f"1x1+{monitor.x}+{monitor.y}")

    canvas = tk.Canvas(root, width=1, height=1, highlightthickness=0)
    canvas.pack()

    threading.Thread(target=keep_hdmi_alive, args=(canvas,DEBUG,), daemon=True).start()

    print("üí° Simulation HDMI active. Fermez la fen√™tre ou Ctrl+C pour arr√™ter.")
    root.mainloop()


def signal_handler(sig, frame):
    """Intercepte Ctrl+C proprement."""

    print("\n‚õîÔ∏è Simulation HDMI arr√™t√©e proprement.")
    sys.exit(0)


if __name__ == "__main__":

    DEBUG=False

    check_environment()

    # Gestion du Ctrl+C
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    print("üí° Lancement de HDMI Keep Alive...")
    start_hdmi_simulator(DEBUG)
